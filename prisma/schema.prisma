generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  matches       MatchParticipant[]
  transactions  Transaction[]
}

model Account {
  id        String   @id @default(cuid())
  userId    String
  type      AccountType
  balance   Int      @default(0) // credits (integer minor units)
  escrow    Int      @default(0) // in-match locked

  user      User     @relation(fields: [userId], references: [id])

  lines     JournalLine[]

  @@index([userId, type])
}

enum AccountType {
  MAIN
}

model JournalEntry {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  description   String?
  idempotencyKey String  @unique

  lines         JournalLine[]
}

model JournalLine {
  id        String   @id @default(cuid())
  entryId   String
  accountId String
  amount    Int      // positive for credit, negative for debit

  entry     JournalEntry @relation(fields: [entryId], references: [id])
  account   Account      @relation(fields: [accountId], references: [id])
}

model Match {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  stake         Int      // per player stake (credits)
  state         MatchState @default(PENDING)
  winnerUserId  String?
  hash          String?  // fairness hash

  participants  MatchParticipant[]
}

model MatchParticipant {
  id       String @id @default(cuid())
  matchId  String
  userId   String

  match    Match @relation(fields: [matchId], references: [id])
  user     User  @relation(fields: [userId], references: [id])

  @@unique([matchId, userId])
}

enum MatchState {
  PENDING
  ACTIVE
  SETTLED
  CANCELED
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  type      TransactionType
  amount    Int
  createdAt DateTime @default(now())
  meta      Json?

  user      User @relation(fields: [userId], references: [id])

  @@index([userId, type])
}

enum TransactionType {
  PROMO_CREDIT
  PURCHASE
  REDEMPTION
  DEPOSIT_CARD
  WITHDRAWAL_CARD
  DEPOSIT_CRYPTO
  WITHDRAWAL_CRYPTO
}
